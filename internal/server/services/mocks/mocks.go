// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/services/services.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	models "github.com/MihailSergeenkov/GophKeeper/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStorager is a mock of Storager interface.
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager.
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance.
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockStorager) AddUser(ctx context.Context, userLogin string, userPassword []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, userLogin, userPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStoragerMockRecorder) AddUser(ctx, userLogin, userPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStorager)(nil).AddUser), ctx, userLogin, userPassword)
}

// AddUserData mocks base method.
func (m *MockStorager) AddUserData(ctx context.Context, encData []byte, mark, description, dataType string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserData", ctx, encData, mark, description, dataType)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUserData indicates an expected call of AddUserData.
func (mr *MockStoragerMockRecorder) AddUserData(ctx, encData, mark, description, dataType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserData", reflect.TypeOf((*MockStorager)(nil).AddUserData), ctx, encData, mark, description, dataType)
}

// FetchUserData mocks base method.
func (m *MockStorager) FetchUserData(ctx context.Context) ([]models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserData", ctx)
	ret0, _ := ret[0].([]models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserData indicates an expected call of FetchUserData.
func (mr *MockStoragerMockRecorder) FetchUserData(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserData", reflect.TypeOf((*MockStorager)(nil).FetchUserData), ctx)
}

// GetFileUserData mocks base method.
func (m *MockStorager) GetFileUserData(ctx context.Context, fileMark string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileUserData", ctx, fileMark)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileUserData indicates an expected call of GetFileUserData.
func (mr *MockStoragerMockRecorder) GetFileUserData(ctx, fileMark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileUserData", reflect.TypeOf((*MockStorager)(nil).GetFileUserData), ctx, fileMark)
}

// GetUserByLogin mocks base method.
func (m *MockStorager) GetUserByLogin(ctx context.Context, userLogin string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, userLogin)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockStoragerMockRecorder) GetUserByLogin(ctx, userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockStorager)(nil).GetUserByLogin), ctx, userLogin)
}

// GetUserData mocks base method.
func (m *MockStorager) GetUserData(ctx context.Context, id int, dataType string) ([]byte, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserData", ctx, id, dataType)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetUserData indicates an expected call of GetUserData.
func (mr *MockStoragerMockRecorder) GetUserData(ctx, id, dataType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserData", reflect.TypeOf((*MockStorager)(nil).GetUserData), ctx, id, dataType)
}

// Ping mocks base method.
func (m *MockStorager) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockStoragerMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockStorager)(nil).Ping), ctx)
}

// MockCrypter is a mock of Crypter interface.
type MockCrypter struct {
	ctrl     *gomock.Controller
	recorder *MockCrypterMockRecorder
}

// MockCrypterMockRecorder is the mock recorder for MockCrypter.
type MockCrypterMockRecorder struct {
	mock *MockCrypter
}

// NewMockCrypter creates a new mock instance.
func NewMockCrypter(ctrl *gomock.Controller) *MockCrypter {
	mock := &MockCrypter{ctrl: ctrl}
	mock.recorder = &MockCrypterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrypter) EXPECT() *MockCrypterMockRecorder {
	return m.recorder
}

// DecryptData mocks base method.
func (m *MockCrypter) DecryptData(data []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecryptData", data)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecryptData indicates an expected call of DecryptData.
func (mr *MockCrypterMockRecorder) DecryptData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecryptData", reflect.TypeOf((*MockCrypter)(nil).DecryptData), data)
}

// EncryptData mocks base method.
func (m *MockCrypter) EncryptData(data []byte) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncryptData", data)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// EncryptData indicates an expected call of EncryptData.
func (mr *MockCrypterMockRecorder) EncryptData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncryptData", reflect.TypeOf((*MockCrypter)(nil).EncryptData), data)
}

// MockFileStorager is a mock of FileStorager interface.
type MockFileStorager struct {
	ctrl     *gomock.Controller
	recorder *MockFileStoragerMockRecorder
}

// MockFileStoragerMockRecorder is the mock recorder for MockFileStorager.
type MockFileStoragerMockRecorder struct {
	mock *MockFileStorager
}

// NewMockFileStorager creates a new mock instance.
func NewMockFileStorager(ctrl *gomock.Controller) *MockFileStorager {
	mock := &MockFileStorager{ctrl: ctrl}
	mock.recorder = &MockFileStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorager) EXPECT() *MockFileStoragerMockRecorder {
	return m.recorder
}

// AddFile mocks base method.
func (m *MockFileStorager) AddFile(ctx context.Context, file io.Reader, objectName string, objectSize int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFile", ctx, file, objectName, objectSize)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFile indicates an expected call of AddFile.
func (mr *MockFileStoragerMockRecorder) AddFile(ctx, file, objectName, objectSize interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockFileStorager)(nil).AddFile), ctx, file, objectName, objectSize)
}

// GetFile mocks base method.
func (m *MockFileStorager) GetFile(ctx context.Context, objectName string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", ctx, objectName)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockFileStoragerMockRecorder) GetFile(ctx, objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockFileStorager)(nil).GetFile), ctx, objectName)
}
