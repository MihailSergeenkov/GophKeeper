// Code generated by MockGen. DO NOT EDIT.
// Source: internal/server/handlers/handlers.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/MihailSergeenkov/GophKeeper/internal/server/models"
	gomock "github.com/golang/mock/gomock"
	zapcore "go.uber.org/zap/zapcore"
)

// MockServicer is a mock of Servicer interface.
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer.
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance.
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// AddCard mocks base method.
func (m *MockServicer) AddCard(ctx context.Context, req models.AddCardRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCard", ctx, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCard indicates an expected call of AddCard.
func (mr *MockServicerMockRecorder) AddCard(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCard", reflect.TypeOf((*MockServicer)(nil).AddCard), ctx, req)
}

// AddFile mocks base method.
func (m *MockServicer) AddFile(ctx context.Context, req models.AddFileRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFile", ctx, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFile indicates an expected call of AddFile.
func (mr *MockServicerMockRecorder) AddFile(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFile", reflect.TypeOf((*MockServicer)(nil).AddFile), ctx, req)
}

// AddPassword mocks base method.
func (m *MockServicer) AddPassword(ctx context.Context, req models.AddPasswordRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPassword", ctx, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPassword indicates an expected call of AddPassword.
func (mr *MockServicerMockRecorder) AddPassword(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPassword", reflect.TypeOf((*MockServicer)(nil).AddPassword), ctx, req)
}

// AddText mocks base method.
func (m *MockServicer) AddText(ctx context.Context, req models.AddTextRequest) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddText", ctx, req)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddText indicates an expected call of AddText.
func (mr *MockServicerMockRecorder) AddText(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddText", reflect.TypeOf((*MockServicer)(nil).AddText), ctx, req)
}

// CreateUserToken mocks base method.
func (m *MockServicer) CreateUserToken(ctx context.Context, req models.CreateUserTokenRequest) (models.CreateUserTokenResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUserToken", ctx, req)
	ret0, _ := ret[0].(models.CreateUserTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUserToken indicates an expected call of CreateUserToken.
func (mr *MockServicerMockRecorder) CreateUserToken(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUserToken", reflect.TypeOf((*MockServicer)(nil).CreateUserToken), ctx, req)
}

// FetchUserData mocks base method.
func (m *MockServicer) FetchUserData(ctx context.Context) ([]models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserData", ctx)
	ret0, _ := ret[0].([]models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserData indicates an expected call of FetchUserData.
func (mr *MockServicerMockRecorder) FetchUserData(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserData", reflect.TypeOf((*MockServicer)(nil).FetchUserData), ctx)
}

// GetCard mocks base method.
func (m *MockServicer) GetCard(ctx context.Context, id int) (models.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCard", ctx, id)
	ret0, _ := ret[0].(models.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCard indicates an expected call of GetCard.
func (mr *MockServicerMockRecorder) GetCard(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCard", reflect.TypeOf((*MockServicer)(nil).GetCard), ctx, id)
}

// GetFile mocks base method.
func (m *MockServicer) GetFile(ctx context.Context, id int) (models.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFile", ctx, id)
	ret0, _ := ret[0].(models.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFile indicates an expected call of GetFile.
func (mr *MockServicerMockRecorder) GetFile(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFile", reflect.TypeOf((*MockServicer)(nil).GetFile), ctx, id)
}

// GetPassword mocks base method.
func (m *MockServicer) GetPassword(ctx context.Context, id int) (models.Password, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPassword", ctx, id)
	ret0, _ := ret[0].(models.Password)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassword indicates an expected call of GetPassword.
func (mr *MockServicerMockRecorder) GetPassword(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassword", reflect.TypeOf((*MockServicer)(nil).GetPassword), ctx, id)
}

// GetText mocks base method.
func (m *MockServicer) GetText(ctx context.Context, id int) (models.Text, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetText", ctx, id)
	ret0, _ := ret[0].(models.Text)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetText indicates an expected call of GetText.
func (mr *MockServicerMockRecorder) GetText(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetText", reflect.TypeOf((*MockServicer)(nil).GetText), ctx, id)
}

// Ping mocks base method.
func (m *MockServicer) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockServicerMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockServicer)(nil).Ping), ctx)
}

// RegisterUser mocks base method.
func (m *MockServicer) RegisterUser(ctx context.Context, req models.RegisterUserRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockServicerMockRecorder) RegisterUser(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockServicer)(nil).RegisterUser), ctx, req)
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockLogger) Error(msg string, fields ...zapcore.Field) {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg}
	for _, a := range fields {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg interface{}, fields ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg}, fields...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}
