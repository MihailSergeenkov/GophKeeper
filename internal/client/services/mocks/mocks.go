// Code generated by MockGen. DO NOT EDIT.
// Source: internal/client/services/services.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	requests "github.com/MihailSergeenkov/GophKeeper/internal/client/requests"
	models "github.com/MihailSergeenkov/GophKeeper/internal/models"
	resty "github.com/go-resty/resty/v2"
	gomock "github.com/golang/mock/gomock"
)

// MockConfigurer is a mock of Configurer interface.
type MockConfigurer struct {
	ctrl     *gomock.Controller
	recorder *MockConfigurerMockRecorder
}

// MockConfigurerMockRecorder is the mock recorder for MockConfigurer.
type MockConfigurerMockRecorder struct {
	mock *MockConfigurer
}

// NewMockConfigurer creates a new mock instance.
func NewMockConfigurer(ctrl *gomock.Controller) *MockConfigurer {
	mock := &MockConfigurer{ctrl: ctrl}
	mock.recorder = &MockConfigurerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigurer) EXPECT() *MockConfigurerMockRecorder {
	return m.recorder
}

// AddData mocks base method.
func (m *MockConfigurer) AddData(data models.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddData", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddData indicates an expected call of AddData.
func (mr *MockConfigurerMockRecorder) AddData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddData", reflect.TypeOf((*MockConfigurer)(nil).AddData), data)
}

// GetData mocks base method.
func (m *MockConfigurer) GetData() map[string]models.UserData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData")
	ret0, _ := ret[0].(map[string]models.UserData)
	return ret0
}

// GetData indicates an expected call of GetData.
func (mr *MockConfigurerMockRecorder) GetData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*MockConfigurer)(nil).GetData))
}

// GetRequestRetry mocks base method.
func (m *MockConfigurer) GetRequestRetry() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestRetry")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRequestRetry indicates an expected call of GetRequestRetry.
func (mr *MockConfigurerMockRecorder) GetRequestRetry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestRetry", reflect.TypeOf((*MockConfigurer)(nil).GetRequestRetry))
}

// GetRequestTimeout mocks base method.
func (m *MockConfigurer) GetRequestTimeout() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequestTimeout")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRequestTimeout indicates an expected call of GetRequestTimeout.
func (mr *MockConfigurerMockRecorder) GetRequestTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequestTimeout", reflect.TypeOf((*MockConfigurer)(nil).GetRequestTimeout))
}

// GetServerAPI mocks base method.
func (m *MockConfigurer) GetServerAPI() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerAPI")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServerAPI indicates an expected call of GetServerAPI.
func (mr *MockConfigurerMockRecorder) GetServerAPI() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerAPI", reflect.TypeOf((*MockConfigurer)(nil).GetServerAPI))
}

// GetToken mocks base method.
func (m *MockConfigurer) GetToken() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetToken indicates an expected call of GetToken.
func (mr *MockConfigurerMockRecorder) GetToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockConfigurer)(nil).GetToken))
}

// UpdateData mocks base method.
func (m *MockConfigurer) UpdateData(data []models.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateData", data)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateData indicates an expected call of UpdateData.
func (mr *MockConfigurerMockRecorder) UpdateData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateData", reflect.TypeOf((*MockConfigurer)(nil).UpdateData), data)
}

// UpdateToken mocks base method.
func (m *MockConfigurer) UpdateToken(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateToken", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateToken indicates an expected call of UpdateToken.
func (mr *MockConfigurerMockRecorder) UpdateToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateToken", reflect.TypeOf((*MockConfigurer)(nil).UpdateToken), token)
}

// MockRequester is a mock of Requester interface.
type MockRequester struct {
	ctrl     *gomock.Controller
	recorder *MockRequesterMockRecorder
}

// MockRequesterMockRecorder is the mock recorder for MockRequester.
type MockRequesterMockRecorder struct {
	mock *MockRequester
}

// NewMockRequester creates a new mock instance.
func NewMockRequester(ctrl *gomock.Controller) *MockRequester {
	mock := &MockRequester{ctrl: ctrl}
	mock.recorder = &MockRequesterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequester) EXPECT() *MockRequesterMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockRequester) Get(url string, opts ...requests.RequestOptionFunc) (*resty.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{url}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*resty.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRequesterMockRecorder) Get(url interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{url}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRequester)(nil).Get), varargs...)
}

// Post mocks base method.
func (m *MockRequester) Post(url string, opts ...requests.RequestOptionFunc) (*resty.Response, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{url}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Post", varargs...)
	ret0, _ := ret[0].(*resty.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockRequesterMockRecorder) Post(url interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{url}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockRequester)(nil).Post), varargs...)
}
